package lbdcoal;

import java.util.Arrays;

import beast.base.core.Description;
import beast.base.evolution.datatype.DataType;
import beast.base.evolution.datatype.Nucleotide;
import beast.base.evolution.substitutionmodel.EigenDecomposition;
import beast.base.evolution.substitutionmodel.GeneralSubstitutionModel;
import beast.base.evolution.tree.Node;


@Description("Jukes Cantor  for unphased diploid  genotypes")
public class JukesCantorGenotypes extends GeneralSubstitutionModel {
	
	 public JukesCantorGenotypes() {
	        // this is added to avoid a parsing error inherited from superclass because frequencies are not provided.
	        frequenciesInput.setRule(beast.base.core.Input.Validate.OPTIONAL);
	        try {
	            // this call will be made twice when constructed from XML
	            // but this ensures that the object is validly constructed for testing purposes.
	            initAndValidate();
	        } catch (Exception e) {
	            e.printStackTrace();
	            throw new RuntimeException("initAndValidate() call failed when constructing JukesCantor()");
	        }
	    }
	
	 double[] frequencies;
	 EigenDecomposition eigenDecomposition;
	 
	 
	  @Override
	    public void initAndValidate() {
		    double minus_16_over_15 = - 16.0/ 15.0;
		    //eigen values
	        double[] eval = new double[]{          0.0,       -0.6666666666666667, -0.6666666666666667, -0.6666666666666667,
	        		                     -0.6666666666666667, -0.6666666666666667, -0.6666666666666667, -1.3333333333333333,
	        		                     -1.3333333333333333, -1.3333333333333333, -1.3333333333333333, -1.3333333333333333,
	        		                     -1.3333333333333333, -1.3333333333333333, -1.3333333333333333, -1.3333333333333333};
	        //eigen vectors
	        double[] evec = new double[]{
	        		                   -0.25,  0.113097179,    0.101532960,    -0.0947414351,    -0.612372436,   -0.0659985445,    0.0370940208, -0.000284591446,   -0.0325548922,    0.0526085288,   -0.0456589739,   -0.0554246268,   -0.0358361333,  -0.00734180690,   -0.0620984728,            0.75,
	        		                   -0.25,  0.287492551,    0.215620312,      0.107024268,     0.204124145,   -0.0193523552,    -0.277380244,   -0.0489739988,     0.225091006,    -0.446420162,     0.236940594,     0.188366506,     0.225509841,     0.269242581,     0.236869095,    0.0833333333,
	        		                   -0.25, -0.594512509,   0.0370408244,   2.39940929e-01,  2.04124145e-01,  6.70307217e-02, -3.37080075e-02, -1.96210932e-01, -1.16365928e-01,  2.95861326e-01, -3.32962741e-02,  2.12172621e-01,  5.25320666e-01,  3.48530869e-01,  1.24883171e-01,  8.33333333e-02,
                                       -0.25,  0.193922778,   -0.354194096,  -2.52223762e-01,  2.04124145e-01,  1.83201780e-02,  2.73994231e-01, -7.82674898e-02,  7.88270844e-02, -2.22868832e-01,  1.00878314e-01,  2.71329179e-01,  2.13217696e-01, -4.40297743e-01,  6.88622095e-01,  8.33333333e-02,
                                       -0.25,  0.224017124,  -0.0243645242,   3.02914603e-01, -2.04124145e-01, -2.60305084e-01, -8.07154289e-02,  4.88573290e-02,  3.59722412e-01,  4.96945867e-01, -1.79474842e-01,  2.12374721e-01, -1.40954784e-01, -1.16704829e-01, -1.18604060e-02, -2.50000000e-01,
                                       -0.25, -0.169540889, -2.29924455e-01,  2.65964470e-01, -2.04124145e-01, -5.46035334e-03, -3.11313713e-01, -1.47803610e-01, -9.52361059e-02, -4.87109365e-01, -7.40124805e-02,  1.39943046e-01,  2.52126798e-01, -2.39111429e-01,  9.63487034e-02,           -0.25,
                                       -0.25,  0.153509979, -4.98672937e-01, -2.52891261e-01, -2.04124145e-01, -4.48381050e-01, -6.10258595e-02,  9.92308725e-02, -2.31931414e-01, -6.24450304e-02,  2.99146297e-01, -2.96893140e-01, -7.53358805e-02,  3.63158066e-01, -2.23898246e-02, -2.50000000e-01,
                                       -0.25, -0.106065461,  1.00603807e-02,  7.00741344e-02,  2.04124145e-01,  2.35492375e-01, -5.07978529e-01,  4.50560422e-01,  2.01192220e-01,  1.28148403e-01, -1.38593971e-01, -4.47340470e-01, -2.95883474e-01, -7.90912532e-02, -1.52748446e-03,  8.33333333e-02,
                                       -0.25,  0.216985406, -2.58688101e-01  -4.48781597e-01,  2.04124145e-01, -2.07428321e-01, -2.57690675e-01, -5.36525397e-01, -2.19463197e-02,  3.14311257e-01, -1.96514141e-01, -1.75828656e-01, -1.08851706e-01,  3.04430795e-02, -3.72056588e-01,  8.33333333e-02,
                                       -0.25, -0.271461642, -2.31707657e-01, -2.78914802e-01,  2.04124145e-01, -3.75889975e-01,  2.16579846e-01,  5.15562015e-01,  1.75050649e-01, -2.89973944e-02, -2.03510469e-01,  2.01392617e-01, -2.90301102e-02,  4.66965975e-02, -2.94175682e-01,  8.33333333e-02,
                                       -0.25,  0.176572607,  3.41517796e-01, -2.90631771e-01, -2.04124145e-01,  1.74954184e-01, -1.59570795e-01,  1.34938974e-01, -4.04336906e-01,  3.96050227e-03,  9.81675176e-02,  4.34802619e-01,  1.79225338e-01, -2.20594408e-01,  1.36714978e-01,           -0.25,
                                       -0.25, -0.311874441,  3.68498239e-01, -1.20764976e-01, -2.04124145e-01,  6.49253054e-03,  3.14699727e-01, -7.08357281e-02,  4.68149970e-01, -1.02636658e-01,  4.89030931e-01, -7.15818661e-02, -2.05758788e-01, -2.79596378e-01,  1.90178939e-01,           -0.25,
                                       -0.25,  0.153509979,  2.46011801e-01, -9.40739358e-02, -2.04124145e-01,  4.00702683e-01,  3.72114111e-01, -6.38186544e-02, -3.12581713e-02,  4.60676266e-02, -5.41539475e-01, -3.07796126e-01,  6.23695831e-02,  5.07532592e-01, -2.64795444e-01,           -0.25,
                                       -0.25, -0.200954496,  2.42600756e-01,  2.76891062e-01,  2.04124145e-01, -1.87814009e-01,  1.96890277e-01, -2.48515355e-01, -5.26834690e-01, -1.64227273e-01, -2.52224188e-01, -3.41983372e-01, -2.90531768e-01, -1.15631088e-01, -2.08864281e-02,  8.33333333e-02,
                                       -0.25,  0.264429924,  1.20114317e-01,  3.03582103e-01,  2.04124145e-01,  2.06396144e-01,  2.54304661e-01,  2.48632024e-01, -5.79787271e-02,  1.13701569e-01,  1.94758436e-01, -5.87578558e-02,  2.05976711e-01, -3.69066637e-02, -2.04122261e-01,  8.33333333e-02,
                                       -0.25, -0.129128089, -8.54456141e-02,  2.66631970e-01,  2.04124145e-01,  4.61240874e-01,  2.37063772e-02, -1.06545880e-01,  1.04098141e-02,  6.30996365e-02,  2.45902725e-01,  9.52248031e-02, -4.81563990e-01, -3.03281861e-02, -2.19704390e-01,  8.33333333e-02};
	        //inverse eigen vectors: the inverse of eigen vector matrix
	        double[] ivec = new double[]{ 
	        		-0.25,           -0.25,           -0.25,          -0.25,            -0.25,           -0.25,           -0.25,           -0.25,           -0.25,           -0.25,           -0.25,           -0.25,          -0.25,            -0.25,          -0.25,            -0.25,
	        		  0.0,  3.81167594e-01, -5.68383083e-01,  1.87215490e-01,  3.18265122e-01, -2.10443215e-01,  7.03686015e-02, -1.47540743e-01,  1.33271074e-01, -2.87571267e-01,  6.29024721e-02, -3.57939868e-01, 1.16846888e-01,  -3.96747465e-02,  4.35112010e-01, -9.35963271e-02,
	        		  0.0,  4.58608337e-01, -1.67739888e-02, -4.41834348e-01,  1.73452052e-02, -4.09634756e-01, -4.31805008e-01,  3.16283764e-02,  9.45812424e-03, -3.89442409e-02,  4.41263132e-01,  3.92860767e-01, -1.00293407e-02,  4.10205972e-01,  7.31586451e-03, -4.19664096e-01,
	        		  0.0,  9.16732550e-02,  7.14471880e-02, -1.63120443e-01,  5.31479520e-01,  3.20630277e-01, -1.50045671e-02, -1.19175989e-01, -4.54810832e-01, -2.64187656e-01, -4.39806265e-01, -2.49183089e-01, -1.48115876e-01,  2.82296431e-01,  3.83363644e-01,  1.72514401e-01,
             -0.612372436,  3.48073014e-01,  7.71096791e-02,  1.87189743e-01, -1.81475930e-01, -3.91026161e-01, -2.35240262e-01,  1.38522783e-01,  2.94308682e-01,  2.32895578e-01, -8.28234917e-02, -1.44236596e-01, -1.89942431e-01,  2.86659910e-01,  2.40954074e-01,  3.14038435e-02,
                      0.0, -2.71473695e-01,  3.69357978e-02,  2.34537897e-01, -4.05230531e-01,  1.37247606e-01, -2.19771415e-01,  2.71004442e-01, -8.60145791e-02, -3.20083223e-01,  1.33756836e-01, -1.00311808e-01,  4.54309313e-01, -5.05542340e-01,  4.90787812e-02,  5.91556919e-01,
                      0.0, -2.89915595e-01, -6.97633676e-02,  3.59678962e-01, -7.50384033e-03, -2.59517961e-01,  2.43475981e-02, -5.41929715e-01, -2.58064156e-01,  2.14102191e-01, -2.82411754e-01,  1.89754593e-01,  3.35331364e-01,  1.82250753e-01,  3.27827524e-01,  7.58134031e-02,
                      0.0, -1.10701935e-01, -1.32393154e-01, -3.45700288e-02, -1.00477829e-02, -1.73960778e-01,  1.84008560e-01,  4.63545775e-01, -6.01439426e-01,  4.52000894e-01,  2.48595586e-01, -1.98385757e-01, -5.02098296e-02, -1.21221983e-01,  2.41971701e-01, -1.57191843e-01,
                      0.0,  3.13310013e-01, -9.99429772e-02,  2.98809780e-02,  2.42394798e-01,  1.19822064e-01, -3.62216862e-01,  1.07740558e-01,  1.74448444e-01,  1.57887440e-01, -5.95499015e-01,  4.44079125e-01,  1.51419890e-01, -5.02023588e-01, -5.36812237e-02, -1.27619645e-01,
                      0.0, -5.16315625e-01,  4.84091602e-01,  6.44240244e-02,  4.91670651e-01, -5.93767903e-01,  1.02097252e-01,  1.81656955e-01,  1.53242742e-01, -3.19764019e-01,  1.81415928e-01, -2.75311526e-02, -1.53884776e-01, -1.36796430e-01,  1.61441405e-01, -7.19806534e-02,
                      0.0,  5.68276373e-02,  1.02638873e-01, -2.26491900e-01, -3.06059899e-01, -1.68489696e-01,  4.74549596e-01, -1.65626625e-01,  2.99396134e-02, -2.77997309e-01,  7.88593744e-02,  4.41451699e-01, -5.20311073e-01, -2.66093262e-01,  5.15325524e-01,  2.31477449e-01,
                      0.0,  3.11919077e-01,  3.99687893e-02, -7.91983785e-03,  3.51142501e-01, -8.99667472e-02, -2.61175754e-01, -5.84329397e-01, -1.92527312e-01,  4.61622904e-01,  4.64937633e-01, -3.45592056e-01, -1.19345577e-01, -1.55999637e-01, -5.07061941e-01,  6.34327355e-01,
                      0.0, -1.61071999e-01,  3.99570796e-01, -2.11492630e-02, -3.20659413e-01,  4.83444956e-01, -1.62785543e-01, -3.11233229e-02,  2.85117876e-01, -1.01183069e-01, -9.29225540e-02,  1.03809769e-01, -1.08872152e-02, -4.02197496e-01,  8.83928908e-01, -8.51892430e-01,
	        		  0.0,  6.17074056e-01,  3.46956046e-01, -1.68554217e-01,  3.81002762e-02, -5.31436991e-01,  4.93336714e-01, -1.46967253e-01, -3.49473894e-01,  2.46913973e-02, -1.20632909e-01, -2.87368884e-01,  4.08001793e-01, -8.42785596e-02, -5.70895772e-01,  3.31448197e-01,
	        		  0.0,  1.67612860e-01,  2.98890363e-01,  7.50276853e-01,  2.82372919e-01, -5.34423189e-01,  2.52050270e-01,  3.54193562e-01, -5.55115834e-01, -4.47211288e-01,  3.33094115e-02, -1.07562390e-01,  7.42529783e-02,  2.55883314e-01, -7.05869094e-01,  -1.18660737e-0,
                     0.75,  1.71840411e-01,  1.01426633e-01,  1.25185314e-01, -2.58222364e-01, -2.46472895e-01, -2.45304741e-01,  4.85795364e-02,  3.17630333e-02,  8.83563941e-02, -2.52182980e-01, -2.34291124e-01, -2.63525896e-01,  4.45080966e-02,  4.18738567e-02,  9.64667256e-02};
	       //evec * dia(eval) * ivec should be equal to Q_GTJC16
	        
	        double[] Q_GTJC16 = new double[]{ 
	        		     -1,        0,        0,     0, 1.0/6.0, 1.0/6.0, 1.0/6.0,       0,       0,       0,  1.0/6.0, 1.0/6.0, 1.0/6.0,       0,       0,        0,
	        		  
	        		      0,       -1,        0,     0, 1.0/6.0,       0,       0, 1.0/6.0, 1.0/6.0,       0,  1.0/6.0,       0,       0, 1.0/6.0, 1.0/6.0,        0,

	        		      0,        0,       -1,     0,       0, 1.0/6.0,       0, 1.0/6.0,       0, 1.0/6.0,        0, 1.0/6.0,       0, 1.0/6.0,        0, 1.0/6.0,

	        		      0,        0,        0,    -1,       0,       0, 1.0/6.0, 1.0/6.0, 1.0/6.0,       0,        0, 1.0/6.0,       0, 1.0/6.0, 1.0/6.0,
	        		 
	        		 1.0/6.0, 1.0/6.0,        0,     0,      -1, 1.0/6.0, 1.0/6.0,       0,       0,       0,        0,       0,       0, 1.0/6.0, 1.0/6.0,        0,

	        		 1.0/6.0,       0, 1.0/6.0,      0, 1.0/6.0,      -1, 1.0/6.0, 1.0/6.0,       0,       0,        0,       0,       0,       0,        0, 1.0/6.0,
	        		 
	        		 1.0/6.0,       0,       0, 1.0/6.0, 1.0/6.0, 1.0/6.0,     -1,       0, 1.0/6.0, 1.0/6.0,        0,       0,       0,       0,        0,       0,
	        		    
	        		       0, 1.0/6.0, 1.0/6.0,       0,       0, 1.0/6.0,      0,       -1, 1.0/6.0,       0, 1.0/6.0,       0,       0,       0,        0, 1.0/6.0,
	        		  
	        		       0, 1.0/6.0,       0, 1.0/6.0,       0,       0, 1.0/6.0, 1.0/6.0,      -1, 1.0/6.0, 1.0/6.0,       0,       0,       0,        0,       0,

	        		       0,      0,  1.0/6.0, 1.0/6.0,       0,       0, 1.0/6.0,       0, 1.0/6.0,     -1,        0, 1.0/6.0,       0, 1.0/6.0,        0,       0,
	        		  
	        		 1.0/6.0, 1.0/6.0,       0,       0,       0,       0,       0, 1.0/6.0, 1.0/6.0,       0,      -1, 1.0/6.0, 1.0/6.0,       0,        0,       0,

	        		 1.0/6.0,       0, 1.0/6.0,       0,       0,       0,       0,       0,       0, 1.0/6.0, 1.0/6.0,      -1, 1.0/6.0, 1.0/6.0,        0,       0, 

	        		 1.0/6.0,       0,       0, 1.0/6.0,       0,       0,       0,       0,       0,       0, 1.0/6.0, 1.0/6.0,      -1,       0, 1.0/6.0,  1.0/6.0,

	        		       0, 1.0/6.0, 1.0/6.0,       0, 1.0/6.0,       0,       0,       0,       0, 1.0/6.0,       0, 1.0/6.0,       0,      -1, 1.0/6.0,        0, 

	        		       0, 1.0/6.0,       0, 1.0/6.0, 1.0/6.0,       0,       0,       0,       0,       0,       0,       0, 1.0/6.0, 1.0/6.0,      -1,  1.0/6.0,

	        		       0,       0, 1.0/6.0, 1.0/6.0,       0, 1.0/6.0,       0, 1.0/6.0,       0,       0,       0,        0, 1.0/6.0,      0, 1.0/6.0,        -1
		
	        };

	        eigenDecomposition = new EigenDecomposition(evec, ivec, eval);

	        if (frequenciesInput.get() != null) {
	            throw new RuntimeException("Frequencies must not be specified in Jukes-Cantor16 model. They are assumed equal.");
	        }

	        frequencies = new double[]{0.0625, 0.0625, 0.0625, 0.0625, 
	        		                   0.0625, 0.0625, 0.0625, 0.0625, 
	        		                   0.0625, 0.0625, 0.0625, 0.0625,
	        		                   0.0625, 0.0625, 0.0625, 0.0625};
	    }

	  @Override
	    public double[] getFrequencies() {
	        return frequencies;
	    }

	@Override
	public void getTransitionProbabilities(Node node, double startTime, double endTime, double rate, double[] matrix) {
		    double delta = 16.0 / 15.0 * (startTime - endTime);
	        double pStay = (1.0 + 15.0 * Math.exp(-delta * rate)) / 16.0;
	        double pMove = (1.0 - Math.exp(-delta * rate)) / 16.0;
	        // fill the matrix with move probabilities
	        Arrays.fill(matrix, pMove);
	        // fill the diagonal
	        for (int i = 0; i < 16; i++) {
	            matrix[i * 17] = pStay;
	        }

	}

    @Override
    public EigenDecomposition getEigenDecomposition(Node node) {
        return eigenDecomposition;
    }

    @Override
    public boolean canHandleDataType(DataType dataType) {
        return dataType instanceof Nucleotide;
    }
}
